var searchIndex = {};
searchIndex['cssparser'] = {"items":[[0,"","cssparser","Implementation of [CSS Syntax Module Level 3](http://dev.w3.org/csswg/css-syntax-3/) for Rust.",null,null],[3,"NumericValue","","The numeric value of `Number` and `Dimension` tokens.",null,null],[12,"value","","The value as a float",0,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer.",0,null],[12,"signed","","Whether the number had a `+` or `-` sign.",0,null],[3,"PercentageValue","","The numeric value of `Percentage` tokens.",null,null],[12,"unit_value","","The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.",1,null],[12,"int_value","","If the origin source did not include a fractional part, the value as an integer. It is **not** divided by 100.",1,null],[12,"signed","","Whether the number had a `+` or `-` sign.",1,null],[3,"SourceLocation","","The line and column number for a given position within the input.",null,null],[12,"line","","The line number, starting at 1 for the first line.",2,null],[12,"column","","The column number within a line, starting at 1 for the character of the line.",2,null],[3,"DeclarationListParser","","Provides an iterator for declaration list parsing.",null,null],[12,"input","","The input given to `DeclarationListParser::new`",3,null],[12,"parser","","The parser given to `DeclarationListParser::new`",3,null],[3,"RuleListParser","","Provides an iterator for rule list parsing.",null,null],[12,"input","","The input given to `RuleListParser::new`",4,null],[12,"parser","","The parser given to `RuleListParser::new`",4,null],[3,"RGBA","","A color with red, green, blue, and alpha components.",null,null],[12,"red","","The red channel. Nominally in 0.0 ... 1.0.",5,null],[12,"green","","The green channel. Nominally in 0.0 ... 1.0.",5,null],[12,"blue","","The blue channel. Nominally in 0.0 ... 1.0.",5,null],[12,"alpha","","The alpha (opacity) channel. Clamped to 0.0 ... 1.0.",5,null],[3,"CssStringWriter","","A `TextWriter` adaptor that escapes text for writing as a double-quoted CSS string.\nQuotes are not included.",null,null],[3,"Parser","","A CSS parser that borrows its `&str` input,\nyields `Token`s,\nand keeps track of nested blocks and functions.",null,null],[3,"Delimiters","","A set of characters, to be used with the `Parser::parse_until*` methods.",null,null],[3,"SourcePosition","","A capture of the internal state of a `Parser` (including the position within the input),\nobtained from the `Parser::position` method.",null,null],[4,"Token","","One of the pieces the CSS input is broken into.",null,null],[13,"Ident","","A [`<ident-token>`](http://dev.w3.org/csswg/css-syntax/#ident-token-diagram)",6,null],[13,"AtKeyword","","A [`<at-keyword-token>`](http://dev.w3.org/csswg/css-syntax/#at-keyword-token-diagram)",6,null],[13,"Hash","","A [`<hash-token>`](http://dev.w3.org/csswg/css-syntax/#hash-token-diagram) with the type flag set to \"unrestricted\"",6,null],[13,"IDHash","","A [`<hash-token>`](http://dev.w3.org/csswg/css-syntax/#hash-token-diagram) with the type flag set to \"id\"",6,null],[13,"QuotedString","","A [`<string-token>`](http://dev.w3.org/csswg/css-syntax/#string-token-diagram)",6,null],[13,"Url","","A [`<url-token>`](http://dev.w3.org/csswg/css-syntax/#url-token-diagram) or `url( <string-token> )` function",6,null],[13,"Delim","","A `<delim-token>`",6,null],[13,"Number","","A [`<number-token>`](http://dev.w3.org/csswg/css-syntax/#number-token-diagram)",6,null],[13,"Percentage","","A [`<percentage-token>`](http://dev.w3.org/csswg/css-syntax/#percentage-token-diagram)",6,null],[13,"Dimension","","A [`<dimension-token>`](http://dev.w3.org/csswg/css-syntax/#dimension-token-diagram)",6,null],[13,"UnicodeRange","","A [`<unicode-range-token>`](http://dev.w3.org/csswg/css-syntax/#unicode-range-token-diagram)",6,null],[13,"WhiteSpace","","A [`<whitespace-token>`](http://dev.w3.org/csswg/css-syntax/#whitespace-token-diagram)",6,null],[13,"Comment","","A comment.",6,null],[13,"Colon","","A `:` `<colon-token>`",6,null],[13,"Semicolon","","A `;` `<semicolon-token>`",6,null],[13,"Comma","","A `,` `<comma-token>`",6,null],[13,"IncludeMatch","","A `~=` [`<include-match-token>`](http://dev.w3.org/csswg/css-syntax/#include-match-token-diagram)",6,null],[13,"DashMatch","","A `|=` [`<dash-match-token>`](http://dev.w3.org/csswg/css-syntax/#dash-match-token-diagram)",6,null],[13,"PrefixMatch","","A `^=` [`<prefix-match-token>`](http://dev.w3.org/csswg/css-syntax/#prefix-match-token-diagram)",6,null],[13,"SuffixMatch","","A `$=` [`<suffix-match-token>`](http://dev.w3.org/csswg/css-syntax/#suffix-match-token-diagram)",6,null],[13,"SubstringMatch","","A `*=` [`<substring-match-token>`](http://dev.w3.org/csswg/css-syntax/#substring-match-token-diagram)",6,null],[13,"Column","","A `||` [`<column-token>`](http://dev.w3.org/csswg/css-syntax/#column-token-diagram)",6,null],[13,"CDO","","A `<!--` [`<CDO-token>`](http://dev.w3.org/csswg/css-syntax/#CDO-token-diagram)",6,null],[13,"CDC","","A `-->` [`<CDC-token>`](http://dev.w3.org/csswg/css-syntax/#CDC-token-diagram)",6,null],[13,"Function","","A [`<function-token>`](http://dev.w3.org/csswg/css-syntax/#function-token-diagram)",6,null],[13,"ParenthesisBlock","","A `<(-token>`",6,null],[13,"SquareBracketBlock","","A `<[-token>`",6,null],[13,"CurlyBracketBlock","","A `<{-token>`",6,null],[13,"BadUrl","","A `<bad-url-token>`",6,null],[13,"BadString","","A `<bad-string-token>`",6,null],[13,"CloseParenthesis","","A `<)-token>`",6,null],[13,"CloseSquareBracket","","A `<]-token>`",6,null],[13,"CloseCurlyBracket","","A `<}-token>`",6,null],[4,"AtRuleType","","The return value for `AtRuleParser::parse_prelude`.\nIndicates whether the at-rule is expected to have a `{ /* ... */ }` block\nor end with a `;` semicolon.",null,null],[13,"WithoutBlock","","The at-rule is expected to end with a `;` semicolon. Example: `@import`.",7,null],[13,"WithBlock","","The at-rule is expected to have a a `{ /* ... */ }` block. Example: `@media`",7,null],[13,"OptionalBlock","","The at-rule may either have a block or end with a semicolon.",7,null],[4,"Color","","A <color> value.",null,null],[13,"CurrentColor","","The 'currentColor' keyword",8,null],[13,"RGBA","","Everything else gets converted to RGBA during parsing",8,null],[5,"parse_important","","Parse `!important`.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"parse_one_declaration","","Parse a single declaration, such as an `( /* ... */ )` parenthesis in an `@supports` prelude.",null,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[5,"parse_one_rule","","Parse a single rule, such as for CSSOM’s `CSSStyleSheet.insertRule`.",null,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[5,"decode_stylesheet_bytes","","Determine the character encoding of a CSS stylesheet and decode it.",null,null],[5,"parse_color_keyword","","Return the named color with the given name.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_nth","","Parse the *An+B* notation, as found in the `:nth-child()` selector.\nThe input is typically the arguments of a function,\nin which case the caller needs to check if the arguments’ parser is exhausted.\nReturn `Ok((A, B))`, or `Err(())` for a syntax error.",null,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[5,"serialize_identifier","","Write a CSS identifier, escaping characters as necessary.",null,{"inputs":[{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[5,"serialize_string","","Write a double-quoted CSS string token, escaping content as necessary.",null,{"inputs":[{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[0,"Delimiter","","`Delimiters` constants.",null,null],[17,"None","cssparser::Delimiter","The empty delimiter set",null,null],[17,"CurlyBracketBlock","","The delimiter set with only the `{` opening curly bracket",null,null],[17,"Semicolon","","The delimiter set with only the `;` semicolon",null,null],[17,"Comma","","The delimiter set with only the `,` comma",null,null],[11,"new","cssparser","Create a new `DeclarationListParser` for the given `input` and `parser`.",3,{"inputs":[{"name":"declarationlistparser"},{"name":"parser"},{"name":"p"}],"output":{"name":"declarationlistparser"}}],[11,"next","","",3,{"inputs":[{"name":"declarationlistparser"}],"output":{"name":"option"}}],[11,"new_for_stylesheet","","Create a new `RuleListParser` for the given `input` at the top-level of a stylesheet\nand the given `parser`.",4,{"inputs":[{"name":"rulelistparser"},{"name":"parser"},{"name":"p"}],"output":{"name":"rulelistparser"}}],[11,"new_for_nested_rule","","Same is `new_for_stylesheet`, but should be used for rule lists inside a block\nsuch as the body of an `@media` rule.",4,{"inputs":[{"name":"rulelistparser"},{"name":"parser"},{"name":"p"}],"output":{"name":"rulelistparser"}}],[11,"next","","",4,{"inputs":[{"name":"rulelistparser"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",6,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"is_parse_error","","Return whether this token represents a parse error.",6,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"numericvalue"}],"output":{"name":"numericvalue"}}],[11,"fmt","","",0,{"inputs":[{"name":"numericvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"numericvalue"},{"name":"numericvalue"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"numericvalue"},{"name":"numericvalue"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"percentagevalue"}],"output":{"name":"percentagevalue"}}],[11,"fmt","","",1,{"inputs":[{"name":"percentagevalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"percentagevalue"},{"name":"percentagevalue"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"percentagevalue"},{"name":"percentagevalue"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"sourcelocation"}],"output":{"name":"sourcelocation"}}],[11,"fmt","","",2,{"inputs":[{"name":"sourcelocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"sourcelocation"},{"name":"sourcelocation"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"sourcelocation"},{"name":"sourcelocation"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"sourceposition"}],"output":{"name":"sourceposition"}}],[11,"fmt","","",9,{"inputs":[{"name":"sourceposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"parser"}],"output":{"name":"parser"}}],[11,"fmt","","",11,{"inputs":[{"name":"delimiters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"delimiters"},{"name":"delimiters"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"delimiters"},{"name":"delimiters"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"delimiters"}],"output":{"name":"delimiters"}}],[11,"bitor","","",11,{"inputs":[{"name":"delimiters"},{"name":"delimiters"}],"output":{"name":"delimiters"}}],[11,"new","","Create a new parser",10,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"parser"}}],[11,"is_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.",10,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"expect_exhausted","","Check whether the input is exhausted. That is, if `.next()` would return a token.\nReturn a `Result` so that the `try!` macro can be used: `try!(input.expect_exhausted())`",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"position","","Return the current internal state of the parser (including position within the input).",10,{"inputs":[{"name":"parser"}],"output":{"name":"sourceposition"}}],[11,"reset","","Restore the internal state of the parser (including position within the input)\nto what was previously saved by the `Parser::position` method.",10,{"inputs":[{"name":"parser"},{"name":"sourceposition"}],"output":null}],[11,"try","","Execute the given closure, passing it the parser.\nIf the result (returned unchanged) is `Err`,\nthe internal state of the parser  (including position within the input)\nis restored to what it was before the call.",10,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"slice","","Return a slice of the CSS input",10,{"inputs":[{"name":"parser"},{"name":"range"}],"output":{"name":"str"}}],[11,"slice_from","","Return a slice of the CSS input, from the given position to the current one.",10,{"inputs":[{"name":"parser"},{"name":"sourceposition"}],"output":{"name":"str"}}],[11,"current_source_location","","Return the line and column number within the input for the current position.",10,{"inputs":[{"name":"parser"}],"output":{"name":"sourcelocation"}}],[11,"source_location","","Return the line and column number within the input for the given position.",10,{"inputs":[{"name":"parser"},{"name":"sourceposition"}],"output":{"name":"sourcelocation"}}],[11,"next","","Return the next token in the input that is neither whitespace or a comment,\nand advance the position accordingly.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"next_including_whitespace","","Same as `Parser::next`, but does not skip whitespace tokens.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"next_including_whitespace_and_comments","","Same as `Parser::next`, but does not skip whitespace or comment tokens.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_entirely","","Have the given closure parse something, then check the the input is exhausted.\nThe result is overridden to `Err(())` if some input remains.",10,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_comma_separated","","Parse a list of comma-separated values, all with the same syntax.",10,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_nested_block","","Parse the content of a block or function.",10,{"inputs":[{"name":"parser"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_until_before","","Limit parsing to until a given delimiter. (E.g. a semicolon for a property value.)",10,{"inputs":[{"name":"parser"},{"name":"delimiters"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_until_after","","Like `parse_until_before`, but also consume the delimiter token.",10,{"inputs":[{"name":"parser"},{"name":"delimiters"},{"name":"f"}],"output":{"name":"result"}}],[11,"expect_whitespace","","Parse a <whitespace-token> and return its value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_ident","","Parse a <ident-token> and return the unescaped value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_ident_matching","","Parse a <ident-token> whose unescaped value is an ASCII-insensitive match for the given value.",10,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"result"}}],[11,"expect_string","","Parse a <string-token> and return the unescaped value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_ident_or_string","","Parse either a <ident-token> or a <string-token>, and return the unescaped value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_url","","Parse a <url-token> and return the unescaped value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_url_or_string","","Parse either a <url-token> or a <string-token>, and return the unescaped value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_number","","Parse a <number-token> and return the integer value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_integer","","Parse a <number-token> that does not have a fractional part, and return the integer value.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_percentage","","Parse a <percentage-token> and return the value.\n`0%` and `100%` map to `0.0` and `1.0` (not `100.0`), respectively.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_colon","","Parse a `:` <colon-token>.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_semicolon","","Parse a `;` <semicolon-token>.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_comma","","Parse a `,` <comma-token>.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_delim","","Parse a <delim-token> with the given value.",10,{"inputs":[{"name":"parser"},{"name":"char"}],"output":{"name":"result"}}],[11,"expect_curly_bracket_block","","Parse a `{ /* ... */ }` curly brackets block.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_square_bracket_block","","Parse a `[ /* ... */ ]` square brackets block.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_parenthesis_block","","Parse a `( /* ... */ )` parenthesis block.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_function","","Parse a <function> token and return its name.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_function_matching","","Parse a <function> token whose name is an ASCII-insensitive match for the given value.",10,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"result"}}],[11,"expect_no_error_token","","Parse the input until exhaustion and check that it contains no “error” token.",10,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_css","","",5,{"inputs":[{"name":"rgba"},{"name":"w"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"to_css","","",8,{"inputs":[{"name":"color"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse a <color> value, per CSS Color Module Level 3.",8,{"inputs":[{"name":"color"},{"name":"parser"}],"output":{"name":"result"}}],[11,"to_css","","",6,{"inputs":[{"name":"token"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Wrap a text writer to create a `CssStringWriter`.",12,{"inputs":[{"name":"cssstringwriter"},{"name":"w"}],"output":{"name":"cssstringwriter"}}],[11,"write_str","","",12,{"inputs":[{"name":"cssstringwriter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",12,{"inputs":[{"name":"cssstringwriter"},{"name":"char"}],"output":{"name":"result"}}],[8,"DeclarationParser","","A trait to provide various parsing of declaration values.",null,null],[16,"Declaration","cssparser::DeclarationParser","The finished representation of a declaration.",null,null],[10,"parse_value","cssparser","Parse the value of a declaration with the given `name`.",13,{"inputs":[{"name":"declarationparser"},{"name":"str"},{"name":"parser"}],"output":{"name":"result"}}],[8,"QualifiedRuleParser","","A trait to provide various parsing of qualified rules.",null,null],[16,"Prelude","cssparser::QualifiedRuleParser","The intermediate representation of a qualified rule prelude.",null,null],[16,"QualifiedRule","","The finished representation of a qualified rule.",null,null],[11,"parse_prelude","cssparser","Parse the prelude of a qualified rule. For style rules, this is as Selector list.",14,{"inputs":[{"name":"qualifiedruleparser"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.",14,{"inputs":[{"name":"qualifiedruleparser"},{"name":"prelude"},{"name":"parser"}],"output":{"name":"result"}}],[8,"AtRuleParser","","A trait to provide various parsing of at-rules.",null,null],[16,"Prelude","cssparser::AtRuleParser","The intermediate representation of an at-rule prelude.",null,null],[16,"AtRule","","The finished representation of an at-rule.",null,null],[11,"parse_prelude","cssparser","Parse the prelude of an at-rule with the given `name`.",15,{"inputs":[{"name":"atruleparser"},{"name":"str"},{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the at-rule.",15,{"inputs":[{"name":"atruleparser"},{"name":"prelude"},{"name":"parser"}],"output":{"name":"result"}}],[11,"rule_without_block","","An `OptionalBlock` prelude was followed by `;`.",15,{"inputs":[{"name":"atruleparser"},{"name":"prelude"}],"output":{"name":"atrule"}}],[8,"ToCss","","Trait for things the can serialize themselves in CSS syntax.",null,null],[10,"to_css","","Serialize `self` in CSS syntax, writing to `dest`.",16,{"inputs":[{"name":"tocss"},{"name":"w"}],"output":{"name":"result"}}],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",16,{"inputs":[{"name":"tocss"}],"output":{"name":"string"}}],[11,"fmt_to_css","","Serialize `self` in CSS syntax and return a result compatible with `std::fmt::Show`.",16,{"inputs":[{"name":"tocss"},{"name":"w"}],"output":{"name":"result"}}],[14,"match_ignore_ascii_case!","","This macro is equivalent to a `match` expression on an `&str` value,\nbut matching is case-insensitive in the ASCII range.",null,null],[11,"parse_prelude","","Parse the prelude of an at-rule with the given `name`.",15,null],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the at-rule.",15,null],[11,"rule_without_block","","An `OptionalBlock` prelude was followed by `;`.",15,null],[11,"parse_prelude","","Parse the prelude of a qualified rule. For style rules, this is as Selector list.",14,null],[11,"parse_block","","Parse the content of a `{ /* ... */ }` block for the body of the qualified rule.",14,null],[11,"to_css_string","","Serialize `self` in CSS syntax and return a string.",16,null],[11,"fmt_to_css","","Serialize `self` in CSS syntax and return a result compatible with `std::fmt::Show`.",16,null]],"paths":[[3,"NumericValue"],[3,"PercentageValue"],[3,"SourceLocation"],[3,"DeclarationListParser"],[3,"RuleListParser"],[3,"RGBA"],[4,"Token"],[4,"AtRuleType"],[4,"Color"],[3,"SourcePosition"],[3,"Parser"],[3,"Delimiters"],[3,"CssStringWriter"],[8,"DeclarationParser"],[8,"QualifiedRuleParser"],[8,"AtRuleParser"],[8,"ToCss"]]};
searchIndex['encoding'] = {"items":[[0,"","encoding","# Encoding 0.2.26",null,null],[0,"types","","Interface to the character encoding.",null,null],[3,"CodecError","encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0,null],[12,"cause","","A human-readable cause of the error.",0,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",1,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG \"replacement\" error algorithm.",1,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1,null],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",2,null],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG \"URL\" error algorithms.",2,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG \"<form>\" error algorithms.",2,null],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding.",null,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3,{"inputs":[{"name":"bytewriter"},{"name":"usize"}],"output":null}],[10,"write_byte","","Writes a single byte.",3,{"inputs":[{"name":"bytewriter"},{"name":"u8"}],"output":null}],[10,"write_bytes","","Writes a number of bytes.",3,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4,{"inputs":[{"name":"stringwriter"},{"name":"usize"}],"output":null}],[10,"write_char","","Writes a single character.",4,{"inputs":[{"name":"stringwriter"},{"name":"char"}],"output":null}],[10,"write_str","","Writes a string.",4,{"inputs":[{"name":"stringwriter"},{"name":"str"}],"output":null}],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5,{"inputs":[{"name":"rawencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5,{"inputs":[{"name":"rawencoder"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5,null],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5,{"inputs":[{"name":"rawencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,{"inputs":[{"name":"rawdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,{"inputs":[{"name":"rawdecoder"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6,{"inputs":[{"name":"rawdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"option"}}],[10,"raw_encoder","","Creates a new encoder.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"box"}}],[10,"raw_decoder","","Creates a new decoder.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"box"}}],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7,{"inputs":[{"name":"encoding"},{"name":"str"},{"name":"encodertrap"}],"output":{"name":"result"}}],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7,null],[11,"writer_hint","collections::vec","",8,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"write_byte","","",8,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[11,"write_bytes","","",8,null],[11,"writer_hint","collections::string","",9,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"write_char","","",9,{"inputs":[{"name":"string"},{"name":"char"}],"output":null}],[11,"write_str","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":null}],[0,"codec","encoding","Codec implementations.",null,null],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[11,"clone","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"errorencoding"}}],[11,"name","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"str"}}],[11,"raw_encoder","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"box"}}],[11,"clone","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"errorencoder"}}],[11,"new","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"box"}}],[11,"from_self","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",11,null],[11,"raw_finish","","",11,{"inputs":[{"name":"errorencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"errordecoder"}}],[11,"new","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"box"}}],[11,"from_self","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",12,null],[11,"raw_finish","","",12,{"inputs":[{"name":"errordecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"ascii","encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[11,"clone","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"asciiencoding"}}],[11,"name","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"str"}}],[11,"raw_encoder","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"box"}}],[11,"clone","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"asciiencoder"}}],[11,"new","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"box"}}],[11,"from_self","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",14,null],[11,"raw_finish","","",14,{"inputs":[{"name":"asciiencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"asciidecoder"}}],[11,"new","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"box"}}],[11,"from_self","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",15,null],[11,"raw_finish","","",15,{"inputs":[{"name":"asciidecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",16,null],[12,"whatwg_name","","",16,null],[12,"index_forward","","",16,null],[12,"index_backward","","",16,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"name","encoding::codec::singlebyte","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"box"}}],[11,"clone","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"singlebyteencoder"}}],[11,"new","","",17,null],[11,"from_self","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",17,null],[11,"raw_finish","","",17,{"inputs":[{"name":"singlebyteencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"singlebytedecoder"}}],[11,"new","","",18,null],[11,"from_self","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",18,null],[11,"raw_finish","","",18,{"inputs":[{"name":"singlebytedecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_8","encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib's UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string.",null,null],[11,"clone","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"utf8encoding"}}],[11,"name","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"box"}}],[11,"clone","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"utf8encoder"}}],[11,"new","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"box"}}],[11,"from_self","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",20,null],[11,"raw_finish","","",20,{"inputs":[{"name":"utf8encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"utf8decoder"}}],[11,"new","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"box"}}],[11,"from_self","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",21,null],[11,"raw_finish","","",21,{"inputs":[{"name":"utf8decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_16","encoding::codec","UTF-16.",null,null],[3,"Little","encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[11,"clone","","",22,{"inputs":[{"name":"little"}],"output":{"name":"little"}}],[11,"clone","","",23,{"inputs":[{"name":"big"}],"output":{"name":"big"}}],[11,"clone","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"utf16encoding"}}],[11,"name","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"box"}}],[11,"clone","","",25,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"from_self","","",25,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",25,null],[11,"raw_finish","","",25,{"inputs":[{"name":"utf16encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"new","","",26,{"inputs":[{"name":"utf16decoder"}],"output":{"name":"box"}}],[11,"from_self","","",26,{"inputs":[{"name":"utf16decoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",26,null],[11,"raw_finish","","",26,{"inputs":[{"name":"utf16decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[3,"Windows949Decoder","","A decoder for Windows code page 949.",null,null],[11,"clone","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"windows949encoding"}}],[11,"name","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"box"}}],[11,"clone","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"windows949encoder"}}],[11,"new","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"box"}}],[11,"from_self","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",28,null],[11,"raw_finish","","",28,{"inputs":[{"name":"windows949encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"windows949decoder"}}],[11,"new","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"box"}}],[11,"from_self","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",29,null],[11,"raw_finish","","",29,{"inputs":[{"name":"windows949decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"EUCJP0212Decoder","","A decoder for EUC-JP with JIS X 0212 in G3.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JDecoder","","A decoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[3,"ISO2022JPDecoder","","A decoder for ISO-2022-JP with JIS X 0212 support.",null,null],[11,"clone","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"eucjpencoding"}}],[11,"name","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"box"}}],[11,"clone","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"eucjpencoder"}}],[11,"new","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"box"}}],[11,"from_self","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",31,null],[11,"raw_finish","","",31,{"inputs":[{"name":"eucjpencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"eucjp0212decoder"}}],[11,"new","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"box"}}],[11,"from_self","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",32,null],[11,"raw_finish","","",32,{"inputs":[{"name":"eucjp0212decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"windows31jencoding"}}],[11,"name","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"box"}}],[11,"clone","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"windows31jencoder"}}],[11,"new","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"box"}}],[11,"from_self","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",34,null],[11,"raw_finish","","",34,{"inputs":[{"name":"windows31jencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"windows31jdecoder"}}],[11,"new","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"box"}}],[11,"from_self","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",35,null],[11,"raw_finish","","",35,{"inputs":[{"name":"windows31jdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[11,"clone","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"iso2022jpencoding"}}],[11,"name","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"box"}}],[11,"clone","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"iso2022jpencoder"}}],[11,"new","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"box"}}],[11,"from_self","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",37,null],[11,"raw_finish","","",37,{"inputs":[{"name":"iso2022jpencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"iso2022jpdecoder"}}],[11,"new","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"box"}}],[11,"from_self","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",38,null],[11,"raw_finish","","",38,{"inputs":[{"name":"iso2022jpdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GB18030Encoding","encoding::codec::simpchinese","GB 18030-2005.",null,null],[3,"GB18030Encoder","","An encoder for GB 18030.",null,null],[3,"GB18030Decoder","","A decoder for GB 18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[3,"HZDecoder","","A decoder for HZ.",null,null],[11,"clone","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"gb18030encoding"}}],[11,"name","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"box"}}],[11,"clone","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"gb18030encoder"}}],[11,"new","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"box"}}],[11,"from_self","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",40,null],[11,"raw_finish","","",40,{"inputs":[{"name":"gb18030encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"gb18030decoder"}}],[11,"new","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"box"}}],[11,"from_self","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",41,null],[11,"raw_finish","","",41,{"inputs":[{"name":"gb18030decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"hzencoding"}}],[11,"name","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"box"}}],[11,"clone","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"hzencoder"}}],[11,"new","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"box"}}],[11,"from_self","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",43,null],[11,"raw_finish","","",43,{"inputs":[{"name":"hzencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"hzdecoder"}}],[11,"new","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"box"}}],[11,"from_self","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",44,null],[11,"raw_finish","","",44,{"inputs":[{"name":"hzdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[3,"BigFive2003HKSCS2008Decoder","","A decoder for Big5-2003 with HKSCS-2008 extension.",null,null],[11,"clone","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"bigfive2003encoding"}}],[11,"name","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"box"}}],[11,"clone","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"bigfive2003encoder"}}],[11,"new","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"box"}}],[11,"from_self","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",46,null],[11,"raw_finish","","",46,{"inputs":[{"name":"bigfive2003encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"bigfive2003hkscs2008decoder"}}],[11,"new","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"box"}}],[11,"from_self","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",47,null],[11,"raw_finish","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::whatwg","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"encoderonlyutf8encoding"}}],[11,"name","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"box"}}],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[0,"whatwg","encoding::all","",null,null],[7,"X_USER_DEFINED","encoding::all::whatwg","",null,null],[7,"ISO_8859_8_I","","",null,null],[7,"REPLACEMENT","","",null,null],[7,"ERROR","encoding::all","",null,null],[7,"ASCII","","",null,null],[7,"IBM866","","",null,null],[7,"ISO_8859_1","","",null,null],[7,"ISO_8859_2","","",null,null],[7,"ISO_8859_3","","",null,null],[7,"ISO_8859_4","","",null,null],[7,"ISO_8859_5","","",null,null],[7,"ISO_8859_6","","",null,null],[7,"ISO_8859_7","","",null,null],[7,"ISO_8859_8","","",null,null],[7,"ISO_8859_10","","",null,null],[7,"ISO_8859_13","","",null,null],[7,"ISO_8859_14","","",null,null],[7,"ISO_8859_15","","",null,null],[7,"ISO_8859_16","","",null,null],[7,"KOI8_R","","",null,null],[7,"KOI8_U","","",null,null],[7,"MAC_ROMAN","","",null,null],[7,"WINDOWS_874","","",null,null],[7,"WINDOWS_1250","","",null,null],[7,"WINDOWS_1251","","",null,null],[7,"WINDOWS_1252","","",null,null],[7,"WINDOWS_1253","","",null,null],[7,"WINDOWS_1254","","",null,null],[7,"WINDOWS_1255","","",null,null],[7,"WINDOWS_1256","","",null,null],[7,"WINDOWS_1257","","",null,null],[7,"WINDOWS_1258","","",null,null],[7,"MAC_CYRILLIC","","",null,null],[7,"UTF_8","","",null,null],[7,"UTF_16LE","","",null,null],[7,"UTF_16BE","","",null,null],[7,"WINDOWS_949","","",null,null],[7,"EUC_JP","","",null,null],[7,"WINDOWS_31J","","",null,null],[7,"ISO_2022_JP","","",null,null],[7,"GB18030","","",null,null],[7,"HZ","","",null,null],[7,"BIG5_2003","","",null,null],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"Vec"],[3,"String"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"Windows949Decoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"EUCJP0212Decoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"Windows31JDecoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"ISO2022JPDecoder"],[3,"GB18030Encoding"],[3,"GB18030Encoder"],[3,"GB18030Decoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"HZDecoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"BigFive2003HKSCS2008Decoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex['encoding-index-tradchinese'] = {"items":[[0,"","encoding-index-tradchinese","Traditional Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"big5","","Big5 and HKSCS.",null,null],[5,"forward","encoding-index-tradchinese::big5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding-index-japanese'] = {"items":[[0,"","encoding-index-japanese","Japanese index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"jis0208","","JIS X 0208 with common extensions.",null,null],[5,"forward","encoding-index-japanese::jis0208","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"jis0212","encoding-index-japanese","JIS X 0212.",null,null],[5,"forward","encoding-index-japanese::jis0212","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding-index-korean'] = {"items":[[0,"","encoding-index-korean","Korean index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"euc_kr","","KS X 1001 plus Unified Hangul Code.",null,null],[5,"forward","encoding-index-korean::euc_kr","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding-index-simpchinese'] = {"items":[[0,"","encoding-index-simpchinese","Simplified Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"gb18030","","GB 18030 two-byte area.",null,null],[5,"forward","encoding-index-simpchinese::gb18030","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"gb18030_ranges","encoding-index-simpchinese","GB 18030 four-byte area.",null,null],[5,"forward","encoding-index-simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex['encoding-index-singlebyte'] = {"items":[[0,"","encoding-index-singlebyte","Single-byte index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"ibm866","","IBM code page 866.",null,null],[5,"forward","encoding-index-singlebyte::ibm866","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_2","encoding-index-singlebyte","ISO 8859-2.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_3","encoding-index-singlebyte","ISO 8859-3.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_4","encoding-index-singlebyte","ISO 8859-4.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_5","encoding-index-singlebyte","ISO 8859-5.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_6","encoding-index-singlebyte","ISO 8859-6.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_7","encoding-index-singlebyte","ISO 8859-7.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_8","encoding-index-singlebyte","ISO 8859-8 (either visual or logical).",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_10","encoding-index-singlebyte","ISO 8859-10.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_13","encoding-index-singlebyte","ISO 8859-13.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_14","encoding-index-singlebyte","ISO 8859-14.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_15","encoding-index-singlebyte","ISO 8859-15.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_16","encoding-index-singlebyte","ISO 8859-16.",null,null],[5,"forward","encoding-index-singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_r","encoding-index-singlebyte","KOI8-R.",null,null],[5,"forward","encoding-index-singlebyte::koi8_r","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_u","encoding-index-singlebyte","KOI8-U.",null,null],[5,"forward","encoding-index-singlebyte::koi8_u","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"macintosh","encoding-index-singlebyte","MacRoman.",null,null],[5,"forward","encoding-index-singlebyte::macintosh","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_874","encoding-index-singlebyte","Windows code page 874.",null,null],[5,"forward","encoding-index-singlebyte::windows_874","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1250","encoding-index-singlebyte","Windows code page 1250.",null,null],[5,"forward","encoding-index-singlebyte::windows_1250","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1251","encoding-index-singlebyte","Windows code page 1251.",null,null],[5,"forward","encoding-index-singlebyte::windows_1251","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1252","encoding-index-singlebyte","Windows code page 1252.",null,null],[5,"forward","encoding-index-singlebyte::windows_1252","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1253","encoding-index-singlebyte","Windows code page 1253.",null,null],[5,"forward","encoding-index-singlebyte::windows_1253","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1254","encoding-index-singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding-index-singlebyte::windows_1254","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1255","encoding-index-singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding-index-singlebyte::windows_1255","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1256","encoding-index-singlebyte","Windows code page 1256.",null,null],[5,"forward","encoding-index-singlebyte::windows_1256","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1257","encoding-index-singlebyte","Windows code page 1257.",null,null],[5,"forward","encoding-index-singlebyte::windows_1257","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1258","encoding-index-singlebyte","Windows code page 1258.",null,null],[5,"forward","encoding-index-singlebyte::windows_1258","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"x_mac_cyrillic","encoding-index-singlebyte","MacCyrillic.",null,null],[5,"forward","encoding-index-singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}]],"paths":[]};
searchIndex['text_writer'] = {"items":[[0,"","text_writer","",null,null],[3,"Error","","Indicates some kind of error during writing, but does not provide further details.",null,null],[6,"Result","","The return type of `TextWriter::write_*` methods.",null,null],[8,"TextWriter","","A Unicode write-only stream.",null,null],[10,"write_str","","Write a string.",0,{"inputs":[{"name":"textwriter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Write a code point.",0,{"inputs":[{"name":"textwriter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Make `TextWriter` usable with the `write!` macro.",0,{"inputs":[{"name":"textwriter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","collections::string","",2,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",2,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",3,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",3,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}]],"paths":[[8,"TextWriter"],[3,"Error"],[3,"String"],[3,"Formatter"]]};
searchIndex['matches'] = {"items":[[0,"","matches","",null,null],[14,"matches!","","",null,null],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null]],"paths":[]};
searchIndex['encoding_index_tests'] = {"items":[[0,"","encoding_index_tests","Macros and utilities for testing indices.",null,null],[14,"single_byte_tests!","","Makes a common test suite for single-byte indices.",null,null],[14,"multi_byte_tests!","","Makes a common test suite for multi-byte indices.",null,null],[14,"multi_byte_range_tests!","","Makes a common test suite for multi-byte range indices.",null,null]],"paths":[]};
initSearch(searchIndex);
